# bits = "1100011001"
# bits = "11111000011111001"
# res = bits[bits.index("0") : bits.index("0") + bits[bits.index("0") :].index("1")]


def rate(bits):
    n1 = bits.index("0") if "0" in bits else len(bits)
    n0 = (
        len(
            bits[bits.index("0") : bits.index("0") + bits[bits.index("0") :].index("1")]
        )
        if "0" in bits
        else 0
    )

    if n0 == n1:
        rate = n1
    elif n1 % 2 == 0:
        rate = 2
    elif n0 == 1:
        rate = 1
    # elif n1 in (1, 3):
    #     rate = 3
    else:
        rate = n1

    return rate

a = '00011100010101010001000000011101110101110001010111000101000111010111010001110101110000000111010101000101110100011101110111000101110111000111010000000101011101000111011101110001110101011100000001011101110111000101011100011101110001011101110100010101000000011101110111000101010111000100010111010000000111000101010100010000000101110101000101110001110111010100011101011101110000000111010100011101110111000111011101000101110101110101110'
# value, result key pairs
samples = {
    "111111000000111111000000111111000000111111000000000000000000111111000000000000000000111111111111111111000000111111000000111111111111111111000000111111111111111111000000000000000000000000000000000000000000111111000000111111111111111111000000111111111111111111000000111111111111111111000000000000000000111111000000111111000000111111111111111111000000000000000000111111111111111111000000111111000000111111000000000000000000111111": 6,
    "1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011": 2,
    "111000111": 3,
    "111": 3,
    "1110111": 1,
    "111110000011111": 5,
    "1111111": 7,
    "10001": 1,
}

for index, (value, result) in enumerate(samples.items()):
    rate_val = rate(value)
    print(
        ">> n-{} expected: {} Got: {} ===> {}".format(
            index, result, rate_val, result == rate_val
        )
    )


1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011
2

111000111
3

111
3

1110111
1

111110000011111
5

1111111
7


1
1

101
1

10001
1

10111
1

1110111
1


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011
2

1
1

101
1

10001
1

10111
1

1110111
1

111
1

1111111
1

110011
2

111000111
1

111110000011111
1


# rate = (bits.index("0")
#     # len(
#     #     bits[bits.index("0") : bits.index("0") + bits[bits.index("0") :].index("1")]
#     # )
#     if "0" in bits
#     else len(bits)
# )
# rate = 1
# rate = 2 if rate % 2 == 0 else 1 if rate in (1, 3) else rate
