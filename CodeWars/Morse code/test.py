import re

# test
bits_string = "111001100011"
bits_list = re.findall(r"0+|1+", bits_string)
print(">>", bits_list)


def rate(bits):
    ones = len(min(filter(lambda x: bool(x), bits.split("0"))))
    zeroes = len(min(filter(lambda x: bool(x), bits.split("1")))) if "0" in bits else 0

    if zeroes == ones:
        rate = ones
    elif ones % 2 == 0:
        rate = 2
    elif zeroes == 1:
        rate = 1
    else:
        rate = ones

    return rate


a = "00011100010101010001000000011101110101110001010111000101000111010111010001110101110000000111010101000101110100011101110111000101110111000111010000000101011101000111011101110001110101011100000001011101110111000101011100011101110001011101110100010101000000011101110111000101010111000100010111010000000111000101010100010000000101110101000101110001110111010100011101011101110000000111010100011101110111000111011101000101110101110101110"
# (value, rate) key pairs
samples = {
    "111111000000111111000000111111000000111111000000000000000000111111000000000000000000111111111111111111000000111111000000111111111111111111000000111111111111111111000000000000000000000000000000000000000000111111000000111111111111111111000000111111111111111111000000111111111111111111000000000000000000111111000000111111000000111111111111111111000000000000000000111111111111111111000000111111000000111111000000000000000000111111": 6,
    "1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011": 2,
    "1110001010101000100000001110111010111000101011100010100011101011101000111010111000000011101010100010111010001110111011100010111011100011101000000010101110100011101110111000111010101110000000101110111011100010101110001110111000101110111010001010100000001110111011100010101011100010001011101000000011100010101010001000000010111010100010111000111011101010001110101110111000000011101010001110111011100011101110100010111010111010111": 1,
    "111000111": 3,
    "111": 3,
    "1110111": 1,
    "111110000011111": 5,
    "1111111": 7,
    "10001": 1,
}

for index, (value, result) in enumerate(samples.items()):
    rate_val = rate(value)
    print(
        ">> n-{} expected: {} Got: {} ===> {}".format(
            index, result, rate_val, result == rate_val
        )
    )


# Result
# >> ['111', '00', '11', '000', '11']
# >> n-0 expected: 6 Got: 6 ===> True
# >> n-1 expected: 2 Got: 2 ===> True
# >> n-2 expected: 1 Got: 1 ===> True
# >> n-3 expected: 3 Got: 3 ===> True
# >> n-4 expected: 3 Got: 3 ===> True
# >> n-5 expected: 1 Got: 1 ===> True
# >> n-6 expected: 5 Got: 5 ===> True
# >> n-7 expected: 7 Got: 7 ===> True
# >> n-8 expected: 1 Got: 1 ===> True

# Draft:
# bits = bits[bits.index('1'):len(bits)-bits[::-1].index('1')] # remove the zeros from the beginning and the end of bits


# rate = (bits.index("0")
#     # len(
#     #     bits[bits.index("0") : bits.index("0") + bits[bits.index("0") :].index("1")]
#     # )
#     if "0" in bits
#     else len(bits)
# )
# rate = 1
# rate = 2 if rate % 2 == 0 else 1 if rate in (1, 3) else rate


# bits = "1100011001"
# bits = "11111000011111001"
# res = bits[bits.index("0") : bits.index("0") + bits[bits.index("0") :].index("1")]
